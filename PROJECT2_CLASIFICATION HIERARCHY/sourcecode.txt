package classificationHierarchydataset;

import javax.swing.*;
import javax.swing.border.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Stack;
import javax.imageio.ImageIO;

public class ClassificationHierarchy extends JPanel {

    private Map<String, String[]> hierarchy = new HashMap<>();
    private Stack<String> undoStack = new Stack<>(); // Stack to track hierarchy additions
    private JTextField parentField;
    private JTextField childrenField;
    private JButton addButton;
    private JButton drawButton;
    private JButton refreshButton;
    private JButton saveButton;
    private JButton backButton;
    private JButton undoButton;

    public ClassificationHierarchy() {
        setLayout(new BorderLayout());
        
        
        JPanel titlePanel = new JPanel();
        JLabel titleLabel = new JLabel("HIERARCHY IMAGE GENERATOR by SVINFOTECH", SwingConstants.CENTER);
        titleLabel.setFont(new Font("Serif", Font.BOLD, 36)); 
// Set custom font and size
        titleLabel.setForeground(Color.BLUE);
 // Set title color

        // Create double-shaded border
        Border outerBorder = new LineBorder(Color.BLACK, 2); 
// Outer black border
        Border innerBorder = new LineBorder(Color.LIGHT_GRAY, 5); 
// Inner lighter border
        titlePanel.setBorder(BorderFactory.createCompoundBorder(outerBorder, innerBorder));

        titlePanel.add(titleLabel); // Add label to the panel
        add(titlePanel, BorderLayout.NORTH);
 // Add title panel at the top

        
        
        
        // Input panel for parent and children fields
        JPanel inputPanel = new JPanel();
        inputPanel.setLayout(new FlowLayout());

        parentField = new JTextField(10);
        childrenField = new JTextField(20);

        addButton = new JButton("Add Hierarchy");
        drawButton = new JButton("Draw Diagram");
        refreshButton = new JButton("Refresh");
        saveButton = new JButton("Save Diagram");
        backButton = new JButton("Back");
        undoButton = new JButton("Undo Last");

        inputPanel.add(new JLabel("Parent:"));
        inputPanel.add(parentField);
        inputPanel.add(new JLabel("Children (comma-separated):"));
        inputPanel.add(childrenField);
        inputPanel.add(addButton);
        inputPanel.add(drawButton);
        inputPanel.add(refreshButton);
        inputPanel.add(saveButton);
        inputPanel.add(backButton);
        inputPanel.add(undoButton);

        add(inputPanel, BorderLayout.SOUTH);

        // Canvas panel for drawing the hierarchy diagram
        JPanel canvasPanel = new JPanel(true) {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                Graphics2D g2d = (Graphics2D) g;

                // Enable anti-aliasing for smoother lines and shapes
                g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

                // Draw the hierarchy starting from the first root
                if (hierarchy.size() > 0) {
                    for (String root : hierarchy.keySet()) {
                        drawHierarchy(g2d, root, 400, 50, 120, 40); // Centering root at 400
                        break; // Draw only one root for now
                    }
                }
            }
        };

        add(canvasPanel, BorderLayout.CENTER);

        // Button to add hierarchy data
        addButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                addHierarchy();
            }
        });

        // Button to redraw the diagram
        drawButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                canvasPanel.repaint();
            }
        });

        // Refresh button to clear the diagram
        refreshButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                hierarchy.clear(); // Clear the hierarchy map
                canvasPanel.repaint(); // Redraw the canvas
                parentField.setText(""); // Clear the input fields
                childrenField.setText("");
                undoStack.clear(); // Clear the undo stack
            }
        });

        // Save button to save the diagram as an image
        saveButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                saveDiagram(canvasPanel); // Call method to save the diagram
            }
        });

        // Back button to clear input fields
        backButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                parentField.setText(""); // Clear parent field
                childrenField.setText(""); // Clear children field
                JOptionPane.showMessageDialog(ClassificationHierarchy.this, "Input fields cleared. You can enter new data."); // Notify the user
            }
        });

        // Undo button to undo the last added hierarchy
        undoButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                undoLastHierarchy();
                canvasPanel.repaint(); // Redraw the canvas
            }
        });
    }

    // Method to add hierarchy based on user input
    private void addHierarchy() {
        String parent = parentField.getText().trim();
        String children = childrenField.getText().trim();
        if (parent.isEmpty() || children.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Both parent and children fields must be filled!", 
                "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        String[] childrenArray = children.split(",");
        for (int i = 0; i < childrenArray.length; i++) {
            childrenArray[i] = childrenArray[i].trim();
        }
        hierarchy.put(parent, childrenArray);
        undoStack.push(parent); // Store the parent in undo stack
        parentField.setText("");
        childrenField.setText("");
    }

    // Method to undo the last added hierarchy
    private void undoLastHierarchy() {
        if (!undoStack.isEmpty()) {
            String lastAddedParent = undoStack.pop();
            hierarchy.remove(lastAddedParent); // Remove the last added hierarchy
            JOptionPane.showMessageDialog(this, "Last hierarchy removed: " + lastAddedParent);
        } else {
            JOptionPane.showMessageDialog(this, "No hierarchy to undo!", "Undo Error", JOptionPane.WARNING_MESSAGE);
        }
    }

    // Recursive method to draw the classification hierarchy
    private void drawHierarchy(Graphics2D g2d, String parent, int x, int y, int width, int height) {
        // Set color for parent node
        g2d.setColor(new Color(100, 150, 250)); // Blue for parent
        g2d.fillRect(x, y, width, height); // Fill the rectangle for parent
        g2d.setColor(Color.BLACK); // Set border color
        g2d.drawRect(x, y, width, height); // Draw border for parent
        g2d.drawString(parent, x + 10, y + 25); // Draw parent label

        String[] children = hierarchy.get(parent);
        if (children != null) {
            int numChildren = children.length;
            int childXStart = x - (numChildren - 1) * 150 / 2; // Center children under the parent
            int childY = y + height + 80; // Increased space below parent for children

            for (int i = 0; i < numChildren; i++) {
                int childX = childXStart + i * 150; // Space children evenly
                g2d.drawLine(x + width / 2, y + height, childX + width / 2, childY); // Draw line to child
                
                // Set color for child node
                g2d.setColor(new Color(200, 250, 100)); // Green for children
                g2d.fillRect(childX, childY, width, height); // Fill the rectangle for child
                g2d.setColor(Color.BLACK); // Set border color
                g2d.drawRect(childX, childY, width, height); // Draw border for child
                g2d.drawString(children[i], childX + 10, childY + 25); // Draw child label

                drawHierarchy(g2d, children[i], childX, childY, width, height); // Recursively draw children
            }
        }
    }

    // Method to save the diagram as an image
    private void saveDiagram(JPanel canvasPanel) {
        BufferedImage image = new BufferedImage(canvasPanel.getWidth(), canvasPanel.getHeight(), BufferedImage.TYPE_INT_RGB);
        Graphics2D g2d = image.createGraphics();
        canvasPanel.paint(g2d); // Paint the canvas into the BufferedImage
        g2d.dispose(); // Dispose graphics context

        try {
            // Specify the file path and format
            File outputfile = new File("classification_hierarchy_diagram.png");
            ImageIO.write(image, "png", outputfile); // Save the image as PNG
            JOptionPane.showMessageDialog(this, "Diagram saved as " + outputfile.getAbsolutePath());
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error saving diagram: " + e.getMessage(), 
                "Save Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("Classification Hierarchy Diagram");
        ClassificationHierarchy diagram = new ClassificationHierarchy();

        frame.add(diagram);
        frame.setSize(1200, 800); // Larger canvas size
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }
}
